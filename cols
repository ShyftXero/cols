#!/usr/bin/python3
# this is to address a frustration with using awk and cut
# 16DEC19
# shyft
import re
"""
Dont forget to add it to your path

❯ echo how now brown cow | ./cols.py 1,2,1,1,1,2,3,4,5,6,,8,,,,,5                                                         ─╯
how now how how how now brown cow 
"""

# def hideCols(cols, sep=' ', replace=''):
#     data = open('/dev/stdin').readlines()
#     # print('data = ', data)
#     for line in data:
#         # line = line.replace('\n','') # remove trailing newline

#         line = line[:-1]  # same as above      
#         line = line.split(sep) # break the lines up based on some delimeter. default space
#         line = [x for x in line if x != ''] # filter out empty elements; replaces the conditional in the for block
#         line = [ val for idx, val in enumerate(line) if idx+1 not in cols ] # this whole function is reduced to an if. 
#         # include in the line the values where the index of the value_of_col+1 IS NOT in the list of columns to omit. 
#         print(f'{sep}'.join(line))

def showCols(cols, sep=' ', replace=''):
    #TODO IMPLEMENT THE REPLACE FUNCTIONALITY
    # if args != None:
    #     sep = args.sep
    if r'\x' in sep:
        sep = chr(int(sep[2:]))
    

    data = open('/dev/stdin').readlines()
    # print(data)"\s"

    for line in data:
        line = line[:-1]  # same as above
        line = re.subn(f"{sep}",' ',line)[0]

        # line = line.replace(sep * 4 , "")
        # line = line.replace(sep * 3 , "")
        # line = line.replace(sep * 2 , "")
        # line = line.replace(sep     , " ")      
        line = line.split() # break the lines up based on some delimeter. default space
        line = [x for x in line if x != ''] # filter out empty elements; replaces the conditional in the for block

        if args.hide == True:
            line = [ val for idx, val in enumerate(line) if idx+1 not in cols ] 
        else:
            line = [ val for idx, val in enumerate(line) if idx+1 in cols ]
        # include in the line the values where the index of the value_of_col+1 IS in the list of columns to show.
        # print(line)
        if len(line) > 0:
            print(f'{sep}'.join(line))

  



def csv_int(string):
    # custom handling of a comma separated list of integers
    # https://www.tuxevara.de/2015/01/pythons-argparse-and-lists/
   return [int(x) for x in string.split(',') if x != '']

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description="this is to address a frustration with using awk and cut")
    parser.add_argument("cols", help="the columns you want to display", type=csv_int ) # custom handler
    parser.add_argument("--sep",'-s', help="separator/delimeter string", default=' ', type=str)
    parser.add_argument("--replace",'-r', help='replace X with Y: e.g. --replace "\\s \\t"  to replace all spaces with tabs', default='', type=str)
    parser.add_argument("--not",'-n','--hide', dest='hide', action='store_true',  help="show all columns except these columns; hide these cols", default=False)

    args = parser.parse_args()
    # print('sep', args.sep)

    # if args.hide == True:
    #     # print('hiding')
    #     hideCols(args.cols, sep=args.sep)
    # else:
    showCols(args.cols, sep=args.sep)

