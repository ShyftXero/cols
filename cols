#!/usr/bin/python3
# this is to address a frustration with using awk and cut
# 16DEC19
# shyft

"""
Dont forget to add it to your path

 ~/Dropbox/code/cols ÓÇ∞                                                                                     ÓÇ≤ anaconda3 üêç ‚îÄ‚ïÆ
‚ùØ echo how now brown cow | ./cols.py 1,2,1,1,1,2,3,4,5,6,,8,,,,,5                                                         ‚îÄ‚ïØ
how now how how how now brown cow 
"""


def showCols(cols, sep=' ', replace=''):
    #TODO IMPLEMENT THE REPLACE FUNCTIONALITY

    data = open('/dev/stdin').readlines()
    # print(data)
    # print(f'showing cols: {cols}')

    for line in data:
        # line = line.replace('\n','') # remove trailing newline

        line = line[:-1]  # same as above      
        line = line.split(sep) # break the lines up based on some delimeter. default space
        line = [x for x in line if x != ''] # filter out empty elements; replaces the conditional in the for block

        for col in cols:
            # if col == "": # if there were two consecutive occurences of the delimeter
            #     continue # move on to the next column to process

            try:
                print(f'{line[col-1]} ', end='')
            except IndexError:
                # column doesn't exist; carry on
                pass
            except BaseException as e:
                # some other error; carry on
                # print(e)
                pass
        print()


def csv_int(string):
    # custom handling of a comma separated list of integers
    # https://www.tuxevara.de/2015/01/pythons-argparse-and-lists/
   return [int(x) for x in string.split(',') if x != '']

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("cols", help="the columns you want to display", type=csv_int ) # custom handler
    parser.add_argument("--sep", help="separator/delimeter string", default=' ', type=str)
    parser.add_argument("--replace", help='replace X with Y: e.g. --replace "\s \t"  to replace all spaces with tabs', default='', type=str)
    
    args = parser.parse_args()

    
    showCols(args.cols, sep=args.sep)

